/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CopyTradingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_ALLOCATION"
      | "MAX_LEVERAGE"
      | "blockCopier"
      | "closePosition"
      | "copySettings"
      | "deposit"
      | "executeTrade"
      | "feeRecipient"
      | "getRegisteredTraders"
      | "getTraderStats"
      | "getUserOpenPositions"
      | "getUserPositions"
      | "nextPositionId"
      | "owner"
      | "pause"
      | "paused"
      | "platformFeeRate"
      | "positions"
      | "registerTrader"
      | "registeredTraders"
      | "renounceOwnership"
      | "setCopySettings"
      | "stopCopying"
      | "traders"
      | "transferOwnership"
      | "unpause"
      | "updatePlatformFeeRate"
      | "updateTraderSettings"
      | "userBalances"
      | "userPositions"
      | "verifyTrader"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CopySettingsUpdated"
      | "FeesCollected"
      | "FundsDeposited"
      | "FundsWithdrawn"
      | "OwnershipTransferred"
      | "Paused"
      | "PositionClosed"
      | "PositionOpened"
      | "TradeExecuted"
      | "TraderRegistered"
      | "TraderUpdated"
      | "TraderVerified"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LEVERAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockCopier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "copySettings",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [string, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredTraders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOpenPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPositionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTrader",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredTraders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCopySettings",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stopCopying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "traders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTraderSettings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTrader",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ALLOCATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LEVERAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockCopier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "copySettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOpenPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCopySettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopCopying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "traders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTraderSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CopySettingsUpdatedEvent {
  export type InputTuple = [
    follower: AddressLike,
    trader: AddressLike,
    allocation: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    trader: string,
    allocation: bigint
  ];
  export interface OutputObject {
    follower: string;
    trader: string;
    allocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesCollectedEvent {
  export type InputTuple = [
    trader: AddressLike,
    follower: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [trader: string, follower: string, amount: bigint];
  export interface OutputObject {
    trader: string;
    follower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionClosedEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    pnl: BigNumberish,
    closedPrice: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    pnl: bigint,
    closedPrice: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    pnl: bigint;
    closedPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionOpenedEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    trader: AddressLike,
    follower: AddressLike,
    symbol: string,
    isLong: boolean,
    size: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    trader: string,
    follower: string,
    symbol: string,
    isLong: boolean,
    size: bigint,
    price: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    trader: string;
    follower: string;
    symbol: string;
    isLong: boolean;
    size: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [
    trader: AddressLike,
    symbol: string,
    isLong: boolean,
    size: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    symbol: string,
    isLong: boolean,
    size: bigint,
    price: bigint
  ];
  export interface OutputObject {
    trader: string;
    symbol: string;
    isLong: boolean;
    size: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraderRegisteredEvent {
  export type InputTuple = [
    trader: AddressLike,
    feeRate: BigNumberish,
    maxCopyAmount: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    feeRate: bigint,
    maxCopyAmount: bigint
  ];
  export interface OutputObject {
    trader: string;
    feeRate: bigint;
    maxCopyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraderUpdatedEvent {
  export type InputTuple = [
    trader: AddressLike,
    feeRate: BigNumberish,
    maxCopyAmount: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    feeRate: bigint,
    maxCopyAmount: bigint
  ];
  export interface OutputObject {
    trader: string;
    feeRate: bigint;
    maxCopyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraderVerifiedEvent {
  export type InputTuple = [trader: AddressLike];
  export type OutputTuple = [trader: string];
  export interface OutputObject {
    trader: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CopyTrading extends BaseContract {
  connect(runner?: ContractRunner | null): CopyTrading;
  waitForDeployment(): Promise<this>;

  interface: CopyTradingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_ALLOCATION: TypedContractMethod<[], [bigint], "view">;

  MAX_LEVERAGE: TypedContractMethod<[], [bigint], "view">;

  blockCopier: TypedContractMethod<
    [_copier: AddressLike],
    [void],
    "nonpayable"
  >;

  closePosition: TypedContractMethod<
    [_positionId: BigNumberish, _exitPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  copySettings: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        trader: string;
        allocation: bigint;
        maxPositionSize: bigint;
        stopLoss: bigint;
        takeProfit: bigint;
        isActive: boolean;
        riskMultiplier: bigint;
      }
    ],
    "view"
  >;

  deposit: TypedContractMethod<[], [void], "payable">;

  executeTrade: TypedContractMethod<
    [
      _symbol: string,
      _isLong: boolean,
      _size: BigNumberish,
      _price: BigNumberish,
      _leverage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getRegisteredTraders: TypedContractMethod<[], [string[]], "view">;

  getTraderStats: TypedContractMethod<
    [_trader: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        feeRate: bigint;
        totalFollowers: bigint;
        totalVolume: bigint;
        totalPnL: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getUserOpenPositions: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserPositions: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  nextPositionId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFeeRate: TypedContractMethod<[], [bigint], "view">;

  positions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        trader: string;
        copier: string;
        symbol: string;
        isLong: boolean;
        size: bigint;
        entryPrice: bigint;
        leverage: bigint;
        timestamp: bigint;
        isOpen: boolean;
        exitPrice: bigint;
        pnl: bigint;
      }
    ],
    "view"
  >;

  registerTrader: TypedContractMethod<
    [_feeRate: BigNumberish, _maxCopyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  registeredTraders: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCopySettings: TypedContractMethod<
    [
      _trader: AddressLike,
      _allocation: BigNumberish,
      _maxPositionSize: BigNumberish,
      _stopLoss: BigNumberish,
      _takeProfit: BigNumberish,
      _riskMultiplier: BigNumberish
    ],
    [void],
    "payable"
  >;

  stopCopying: TypedContractMethod<
    [_trader: AddressLike],
    [void],
    "nonpayable"
  >;

  traders: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint, bigint, bigint, bigint, bigint] & {
        trader: string;
        isVerified: boolean;
        totalVolume: bigint;
        totalTrades: bigint;
        followers: bigint;
        maxCopyAmount: bigint;
        feeRate: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePlatformFeeRate: TypedContractMethod<
    [_newFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTraderSettings: TypedContractMethod<
    [_feeRate: BigNumberish, _maxCopyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  userBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userPositions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  verifyTrader: TypedContractMethod<
    [_trader: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_ALLOCATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_LEVERAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockCopier"
  ): TypedContractMethod<[_copier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closePosition"
  ): TypedContractMethod<
    [_positionId: BigNumberish, _exitPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "copySettings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        trader: string;
        allocation: bigint;
        maxPositionSize: bigint;
        stopLoss: bigint;
        takeProfit: bigint;
        isActive: boolean;
        riskMultiplier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "executeTrade"
  ): TypedContractMethod<
    [
      _symbol: string,
      _isLong: boolean,
      _size: BigNumberish,
      _price: BigNumberish,
      _leverage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegisteredTraders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTraderStats"
  ): TypedContractMethod<
    [_trader: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        feeRate: bigint;
        totalFollowers: bigint;
        totalVolume: bigint;
        totalPnL: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserOpenPositions"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserPositions"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "nextPositionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        trader: string;
        copier: string;
        symbol: string;
        isLong: boolean;
        size: bigint;
        entryPrice: bigint;
        leverage: bigint;
        timestamp: bigint;
        isOpen: boolean;
        exitPrice: bigint;
        pnl: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerTrader"
  ): TypedContractMethod<
    [_feeRate: BigNumberish, _maxCopyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredTraders"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCopySettings"
  ): TypedContractMethod<
    [
      _trader: AddressLike,
      _allocation: BigNumberish,
      _maxPositionSize: BigNumberish,
      _stopLoss: BigNumberish,
      _takeProfit: BigNumberish,
      _riskMultiplier: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "stopCopying"
  ): TypedContractMethod<[_trader: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "traders"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint, bigint, bigint, bigint, bigint] & {
        trader: string;
        isVerified: boolean;
        totalVolume: bigint;
        totalTrades: bigint;
        followers: bigint;
        maxCopyAmount: bigint;
        feeRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFeeRate"
  ): TypedContractMethod<[_newFeeRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTraderSettings"
  ): TypedContractMethod<
    [_feeRate: BigNumberish, _maxCopyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPositions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyTrader"
  ): TypedContractMethod<[_trader: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CopySettingsUpdated"
  ): TypedContractEvent<
    CopySettingsUpdatedEvent.InputTuple,
    CopySettingsUpdatedEvent.OutputTuple,
    CopySettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesCollected"
  ): TypedContractEvent<
    FeesCollectedEvent.InputTuple,
    FeesCollectedEvent.OutputTuple,
    FeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PositionClosed"
  ): TypedContractEvent<
    PositionClosedEvent.InputTuple,
    PositionClosedEvent.OutputTuple,
    PositionClosedEvent.OutputObject
  >;
  getEvent(
    key: "PositionOpened"
  ): TypedContractEvent<
    PositionOpenedEvent.InputTuple,
    PositionOpenedEvent.OutputTuple,
    PositionOpenedEvent.OutputObject
  >;
  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TraderRegistered"
  ): TypedContractEvent<
    TraderRegisteredEvent.InputTuple,
    TraderRegisteredEvent.OutputTuple,
    TraderRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TraderUpdated"
  ): TypedContractEvent<
    TraderUpdatedEvent.InputTuple,
    TraderUpdatedEvent.OutputTuple,
    TraderUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TraderVerified"
  ): TypedContractEvent<
    TraderVerifiedEvent.InputTuple,
    TraderVerifiedEvent.OutputTuple,
    TraderVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "CopySettingsUpdated(address,address,uint256)": TypedContractEvent<
      CopySettingsUpdatedEvent.InputTuple,
      CopySettingsUpdatedEvent.OutputTuple,
      CopySettingsUpdatedEvent.OutputObject
    >;
    CopySettingsUpdated: TypedContractEvent<
      CopySettingsUpdatedEvent.InputTuple,
      CopySettingsUpdatedEvent.OutputTuple,
      CopySettingsUpdatedEvent.OutputObject
    >;

    "FeesCollected(address,address,uint256)": TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;
    FeesCollected: TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;

    "FundsDeposited(address,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PositionClosed(uint256,int256,uint256)": TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;
    PositionClosed: TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;

    "PositionOpened(uint256,address,address,string,bool,uint256,uint256)": TypedContractEvent<
      PositionOpenedEvent.InputTuple,
      PositionOpenedEvent.OutputTuple,
      PositionOpenedEvent.OutputObject
    >;
    PositionOpened: TypedContractEvent<
      PositionOpenedEvent.InputTuple,
      PositionOpenedEvent.OutputTuple,
      PositionOpenedEvent.OutputObject
    >;

    "TradeExecuted(address,string,bool,uint256,uint256)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;

    "TraderRegistered(address,uint256,uint256)": TypedContractEvent<
      TraderRegisteredEvent.InputTuple,
      TraderRegisteredEvent.OutputTuple,
      TraderRegisteredEvent.OutputObject
    >;
    TraderRegistered: TypedContractEvent<
      TraderRegisteredEvent.InputTuple,
      TraderRegisteredEvent.OutputTuple,
      TraderRegisteredEvent.OutputObject
    >;

    "TraderUpdated(address,uint256,uint256)": TypedContractEvent<
      TraderUpdatedEvent.InputTuple,
      TraderUpdatedEvent.OutputTuple,
      TraderUpdatedEvent.OutputObject
    >;
    TraderUpdated: TypedContractEvent<
      TraderUpdatedEvent.InputTuple,
      TraderUpdatedEvent.OutputTuple,
      TraderUpdatedEvent.OutputObject
    >;

    "TraderVerified(address)": TypedContractEvent<
      TraderVerifiedEvent.InputTuple,
      TraderVerifiedEvent.OutputTuple,
      TraderVerifiedEvent.OutputObject
    >;
    TraderVerified: TypedContractEvent<
      TraderVerifiedEvent.InputTuple,
      TraderVerifiedEvent.OutputTuple,
      TraderVerifiedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
