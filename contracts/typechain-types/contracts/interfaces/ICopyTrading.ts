/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICopyTradingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closePosition"
      | "executeTrade"
      | "getRegisteredTraders"
      | "getTraderStats"
      | "getUserOpenPositions"
      | "registerTrader"
      | "setCopySettings"
      | "stopCopying"
      | "updateTraderSettings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CopySettingsUpdated"
      | "FeesCollected"
      | "PositionClosed"
      | "PositionOpened"
      | "TraderRegistered"
      | "TraderUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [string, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredTraders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOpenPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTrader",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCopySettings",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stopCopying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTraderSettings",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOpenPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCopySettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopCopying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTraderSettings",
    data: BytesLike
  ): Result;
}

export namespace CopySettingsUpdatedEvent {
  export type InputTuple = [
    follower: AddressLike,
    trader: AddressLike,
    allocation: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    trader: string,
    allocation: bigint
  ];
  export interface OutputObject {
    follower: string;
    trader: string;
    allocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesCollectedEvent {
  export type InputTuple = [
    trader: AddressLike,
    follower: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [trader: string, follower: string, amount: bigint];
  export interface OutputObject {
    trader: string;
    follower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionClosedEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    pnl: BigNumberish,
    closedPrice: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    pnl: bigint,
    closedPrice: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    pnl: bigint;
    closedPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionOpenedEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    trader: AddressLike,
    follower: AddressLike,
    symbol: string,
    isLong: boolean,
    size: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    trader: string,
    follower: string,
    symbol: string,
    isLong: boolean,
    size: bigint,
    price: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    trader: string;
    follower: string;
    symbol: string;
    isLong: boolean;
    size: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraderRegisteredEvent {
  export type InputTuple = [
    trader: AddressLike,
    feeRate: BigNumberish,
    maxCopyAmount: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    feeRate: bigint,
    maxCopyAmount: bigint
  ];
  export interface OutputObject {
    trader: string;
    feeRate: bigint;
    maxCopyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraderUpdatedEvent {
  export type InputTuple = [
    trader: AddressLike,
    feeRate: BigNumberish,
    maxCopyAmount: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    feeRate: bigint,
    maxCopyAmount: bigint
  ];
  export interface OutputObject {
    trader: string;
    feeRate: bigint;
    maxCopyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICopyTrading extends BaseContract {
  connect(runner?: ContractRunner | null): ICopyTrading;
  waitForDeployment(): Promise<this>;

  interface: ICopyTradingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closePosition: TypedContractMethod<
    [_positionId: BigNumberish, _closePrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTrade: TypedContractMethod<
    [
      _symbol: string,
      _isLong: boolean,
      _size: BigNumberish,
      _price: BigNumberish,
      _leverage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getRegisteredTraders: TypedContractMethod<[], [string[]], "view">;

  getTraderStats: TypedContractMethod<
    [_trader: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        feeRate: bigint;
        totalFollowers: bigint;
        totalVolume: bigint;
        totalPnL: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getUserOpenPositions: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  registerTrader: TypedContractMethod<
    [_feeRate: BigNumberish, _maxCopyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCopySettings: TypedContractMethod<
    [
      _trader: AddressLike,
      _allocation: BigNumberish,
      _maxPositionSize: BigNumberish,
      _stopLoss: BigNumberish,
      _takeProfit: BigNumberish,
      _riskMultiplier: BigNumberish
    ],
    [void],
    "payable"
  >;

  stopCopying: TypedContractMethod<
    [_trader: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTraderSettings: TypedContractMethod<
    [_feeRate: BigNumberish, _maxCopyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closePosition"
  ): TypedContractMethod<
    [_positionId: BigNumberish, _closePrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeTrade"
  ): TypedContractMethod<
    [
      _symbol: string,
      _isLong: boolean,
      _size: BigNumberish,
      _price: BigNumberish,
      _leverage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRegisteredTraders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTraderStats"
  ): TypedContractMethod<
    [_trader: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        feeRate: bigint;
        totalFollowers: bigint;
        totalVolume: bigint;
        totalPnL: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserOpenPositions"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "registerTrader"
  ): TypedContractMethod<
    [_feeRate: BigNumberish, _maxCopyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCopySettings"
  ): TypedContractMethod<
    [
      _trader: AddressLike,
      _allocation: BigNumberish,
      _maxPositionSize: BigNumberish,
      _stopLoss: BigNumberish,
      _takeProfit: BigNumberish,
      _riskMultiplier: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "stopCopying"
  ): TypedContractMethod<[_trader: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTraderSettings"
  ): TypedContractMethod<
    [_feeRate: BigNumberish, _maxCopyAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CopySettingsUpdated"
  ): TypedContractEvent<
    CopySettingsUpdatedEvent.InputTuple,
    CopySettingsUpdatedEvent.OutputTuple,
    CopySettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesCollected"
  ): TypedContractEvent<
    FeesCollectedEvent.InputTuple,
    FeesCollectedEvent.OutputTuple,
    FeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "PositionClosed"
  ): TypedContractEvent<
    PositionClosedEvent.InputTuple,
    PositionClosedEvent.OutputTuple,
    PositionClosedEvent.OutputObject
  >;
  getEvent(
    key: "PositionOpened"
  ): TypedContractEvent<
    PositionOpenedEvent.InputTuple,
    PositionOpenedEvent.OutputTuple,
    PositionOpenedEvent.OutputObject
  >;
  getEvent(
    key: "TraderRegistered"
  ): TypedContractEvent<
    TraderRegisteredEvent.InputTuple,
    TraderRegisteredEvent.OutputTuple,
    TraderRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TraderUpdated"
  ): TypedContractEvent<
    TraderUpdatedEvent.InputTuple,
    TraderUpdatedEvent.OutputTuple,
    TraderUpdatedEvent.OutputObject
  >;

  filters: {
    "CopySettingsUpdated(address,address,uint256)": TypedContractEvent<
      CopySettingsUpdatedEvent.InputTuple,
      CopySettingsUpdatedEvent.OutputTuple,
      CopySettingsUpdatedEvent.OutputObject
    >;
    CopySettingsUpdated: TypedContractEvent<
      CopySettingsUpdatedEvent.InputTuple,
      CopySettingsUpdatedEvent.OutputTuple,
      CopySettingsUpdatedEvent.OutputObject
    >;

    "FeesCollected(address,address,uint256)": TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;
    FeesCollected: TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;

    "PositionClosed(uint256,int256,uint256)": TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;
    PositionClosed: TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;

    "PositionOpened(uint256,address,address,string,bool,uint256,uint256)": TypedContractEvent<
      PositionOpenedEvent.InputTuple,
      PositionOpenedEvent.OutputTuple,
      PositionOpenedEvent.OutputObject
    >;
    PositionOpened: TypedContractEvent<
      PositionOpenedEvent.InputTuple,
      PositionOpenedEvent.OutputTuple,
      PositionOpenedEvent.OutputObject
    >;

    "TraderRegistered(address,uint256,uint256)": TypedContractEvent<
      TraderRegisteredEvent.InputTuple,
      TraderRegisteredEvent.OutputTuple,
      TraderRegisteredEvent.OutputObject
    >;
    TraderRegistered: TypedContractEvent<
      TraderRegisteredEvent.InputTuple,
      TraderRegisteredEvent.OutputTuple,
      TraderRegisteredEvent.OutputObject
    >;

    "TraderUpdated(address,uint256,uint256)": TypedContractEvent<
      TraderUpdatedEvent.InputTuple,
      TraderUpdatedEvent.OutputTuple,
      TraderUpdatedEvent.OutputObject
    >;
    TraderUpdated: TypedContractEvent<
      TraderUpdatedEvent.InputTuple,
      TraderUpdatedEvent.OutputTuple,
      TraderUpdatedEvent.OutputObject
    >;
  };
}
